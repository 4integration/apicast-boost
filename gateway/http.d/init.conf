init_by_lua_block {
    -- require("jit.v").start("dump.txt")
    -- require('jit.p').start('vl')
    -- require('jit.dump').start('bsx', 'jit.log')

    require("resty.core")

    local resty_env = require('resty.env')
    -- WARNING, WARNING, WARNING: this is insane hack and should not be touched
    -- This file is not templated by Liquid, because it is used by not blackbox integration tests (Search for TEST_NGINX_HTTP_CONFIG).
    -- So it cannot be templated by liquid, to lift env variables and persist them in the configuration.
    -- This is a workaround so we can store environment at the time of building the config into the config itself.
    --  {% raw %}  {{ ENV }}  {% endraw %} is both valid Liquid template and Lua code.
    -- In Lua it is a table with another empty table inside. In Liquid it prints variable ENV.
    -- This ENV variable is defined in the main nginx.conf.liquid and injected when including this partial.
    -- The content of the ENV variable is a Lua table, so when rendered it actually can run ipairs on it.
    for k,v in pairs({{ ENV }}) do
      if type(k) == 'string' and not resty_env.value(k) then
        resty_env.set(k,v)
      end
    end

    require('resty.resolver').init()

    require('apicast.loader')

    local env = require('apicast.cli.environment').load()
    local context = env:context()


    for k,v in pairs(context.env or {}) do
      resty_env.set(k,v)
    end

    local module = require('apicast.executor')

    if not module then
      ngx.log(ngx.EMERG, 'fatal error when loading the root module')
      os.exit(1)
    end

    if context.policy_chain then
        module = module.new(context.policy_chain)
        package.loaded['apicast.executor'] = module
    end

    module:init()

    collectgarbage("collect")
}

init_worker_by_lua_block {
    require('apicast.executor'):init_worker()
}

lua_shared_dict init 16k;
